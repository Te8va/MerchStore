// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Te8va/MerchStore/internal/domain (interfaces: MerchRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/Te8va/MerchStore/internal/domain"
)

// MockMerchRepository is a mock of MerchRepository interface.
type MockMerchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchRepositoryMockRecorder
}

// MockMerchRepositoryMockRecorder is the mock recorder for MockMerchRepository.
type MockMerchRepositoryMockRecorder struct {
	mock *MockMerchRepository
}

// NewMockMerchRepository creates a new mock instance.
func NewMockMerchRepository(ctrl *gomock.Controller) *MockMerchRepository {
	mock := &MockMerchRepository{ctrl: ctrl}
	mock.recorder = &MockMerchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchRepository) EXPECT() *MockMerchRepositoryMockRecorder {
	return m.recorder
}

// GetMerchPrice mocks base method.
func (m *MockMerchRepository) GetMerchPrice(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchPrice", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchPrice indicates an expected call of GetMerchPrice.
func (mr *MockMerchRepositoryMockRecorder) GetMerchPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchPrice", reflect.TypeOf((*MockMerchRepository)(nil).GetMerchPrice), arg0, arg1)
}

// GetUserBalance mocks base method.
func (m *MockMerchRepository) GetUserBalance(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockMerchRepositoryMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockMerchRepository)(nil).GetUserBalance), arg0, arg1)
}

// GetUserInventory mocks base method.
func (m *MockMerchRepository) GetUserInventory(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInventory", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInventory indicates an expected call of GetUserInventory.
func (mr *MockMerchRepositoryMockRecorder) GetUserInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInventory", reflect.TypeOf((*MockMerchRepository)(nil).GetUserInventory), arg0, arg1)
}

// GetUserPurchases mocks base method.
func (m *MockMerchRepository) GetUserPurchases(arg0 context.Context, arg1 string) ([]domain.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchases", arg0, arg1)
	ret0, _ := ret[0].([]domain.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchases indicates an expected call of GetUserPurchases.
func (mr *MockMerchRepositoryMockRecorder) GetUserPurchases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchases", reflect.TypeOf((*MockMerchRepository)(nil).GetUserPurchases), arg0, arg1)
}

// GetUserTransactionHistory mocks base method.
func (m *MockMerchRepository) GetUserTransactionHistory(arg0 context.Context, arg1 string) (domain.CoinHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactionHistory", arg0, arg1)
	ret0, _ := ret[0].(domain.CoinHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactionHistory indicates an expected call of GetUserTransactionHistory.
func (mr *MockMerchRepositoryMockRecorder) GetUserTransactionHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactionHistory", reflect.TypeOf((*MockMerchRepository)(nil).GetUserTransactionHistory), arg0, arg1)
}

// SavePurchase mocks base method.
func (m *MockMerchRepository) SavePurchase(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePurchase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePurchase indicates an expected call of SavePurchase.
func (mr *MockMerchRepositoryMockRecorder) SavePurchase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePurchase", reflect.TypeOf((*MockMerchRepository)(nil).SavePurchase), arg0, arg1, arg2, arg3)
}

// TransferCoins mocks base method.
func (m *MockMerchRepository) TransferCoins(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferCoins", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferCoins indicates an expected call of TransferCoins.
func (mr *MockMerchRepositoryMockRecorder) TransferCoins(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferCoins", reflect.TypeOf((*MockMerchRepository)(nil).TransferCoins), arg0, arg1, arg2, arg3)
}

// UpdateUserBalance mocks base method.
func (m *MockMerchRepository) UpdateUserBalance(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockMerchRepositoryMockRecorder) UpdateUserBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockMerchRepository)(nil).UpdateUserBalance), arg0, arg1, arg2)
}

// UserExists mocks base method.
func (m *MockMerchRepository) UserExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockMerchRepositoryMockRecorder) UserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockMerchRepository)(nil).UserExists), arg0, arg1)
}
